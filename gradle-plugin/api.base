// Signature format: 2.0
package com.google.devtools.ksp.gradle {

  public final class AndroidPluginIntegration {
    method public boolean canUseAddGeneratedSourceDirectoriesApi(@NonNull org.gradle.api.Project);
    method public boolean canUseInternalKspApis(@NonNull org.gradle.api.Project);
    method public void forEachAndroidSourceSet(@NonNull org.gradle.api.Project project, @NonNull kotlin.jvm.functions.Function1<? super java.lang.String,kotlin.Unit> onSourceSet);
    method @NonNull public java.util.List<java.lang.String> getCompilationSourceSets(@NonNull org.jetbrains.kotlin.gradle.plugin.mpp.KotlinJvmAndroidCompilation kotlinCompilation);
    method public boolean isAgpBuiltInKotlinUsed(@NonNull org.gradle.api.Project);
    method public boolean isKotlinAndroidPluginApplied(@NonNull org.gradle.api.Project);
    method public boolean isKotlinBaseApiPluginApplied(@NonNull org.gradle.api.Project);
    method public void syncSourceSets(@NonNull org.gradle.api.Project project, @NonNull org.jetbrains.kotlin.gradle.plugin.mpp.KotlinJvmAndroidCompilation kotlinCompilation, @NonNull org.gradle.api.tasks.TaskProvider<com.google.devtools.ksp.gradle.KspAATask> kspTaskProvider, @NonNull org.gradle.api.provider.Provider<org.gradle.api.file.Directory> javaOutputDir, @NonNull org.gradle.api.provider.Provider<org.gradle.api.file.Directory> kotlinOutputDir, @NonNull org.gradle.api.provider.Provider<org.gradle.api.file.Directory> classOutputDir, @NonNull org.gradle.api.provider.Provider<org.gradle.api.file.Directory> resourcesOutputDir, @Nullable com.android.build.api.variant.Component androidComponent);
    method public boolean useLegacyVariantApi(@NonNull org.gradle.api.Project);
    field @NonNull public static final com.google.devtools.ksp.gradle.AndroidPluginIntegration INSTANCE;
  }

  public final class GradleCompilationTest {
    ctor public GradleCompilationTest();
    method public void androidGradlePluginBuiltInKotlin();
    method public void androidGradlePluginBuiltInKotlinWithKspAppliedFirst();
    method public void applicationCanAccessGeneratedCode();
    method public void applicationCanAccessGeneratedCode_multiplatform_withConfigCache();
    method public void commandLineArgumentIsIncludedInApoptionsWhenAddedInKspTask();
    method public void errorMessageFailsCompilation();
    method public void invalidArguments();
    method public void kspLibrariesHaveNoGenerated();
    method public void testCommandLineArgumentProvider();
    property public com.google.devtools.ksp.gradle.testing.KspIntegrationTestRule testRule;
    property public ErrorType tmpDir;
    field @NonNull public final com.google.devtools.ksp.gradle.testing.KspIntegrationTestRule testRule;
    field @NonNull public final error.NonExistentClass tmpDir;
  }

  @org.gradle.api.tasks.CacheableTask public abstract class KspAATask extends org.gradle.api.DefaultTask {
    ctor @javax.inject.Inject public KspAATask(@NonNull org.gradle.workers.WorkerExecutor workerExecutor);
    method @org.gradle.api.tasks.TaskAction public final void execute(@NonNull org.gradle.work.InputChanges inputChanges);
    method @NonNull @org.gradle.api.tasks.Nested public abstract org.gradle.api.provider.ListProperty<org.gradle.process.CommandLineArgumentProvider> getCommandLineArgumentProviders();
    method @NonNull @org.gradle.api.tasks.Classpath public abstract org.gradle.api.file.ConfigurableFileCollection getKspClasspath();
    method @NonNull @org.gradle.api.tasks.Nested public abstract com.google.devtools.ksp.gradle.KspGradleConfig getKspConfig();
    property @NonNull @org.gradle.api.tasks.Nested public abstract org.gradle.api.provider.ListProperty<org.gradle.process.CommandLineArgumentProvider> commandLineArgumentProviders;
    property @NonNull @org.gradle.api.tasks.Classpath public abstract org.gradle.api.file.ConfigurableFileCollection kspClasspath;
    property @NonNull @org.gradle.api.tasks.Nested public abstract com.google.devtools.ksp.gradle.KspGradleConfig kspConfig;
    field @NonNull public static final com.google.devtools.ksp.gradle.KspAATask.Companion Companion;
  }

  public static final class KspAATask.Companion {
  }

  public final class KspAATaskKt {
    method @NonNull public static java.util.Set<java.lang.Object> getDoNotGC();
    method @NonNull public static java.util.Map<java.lang.String,java.net.URLClassLoader> getIsolatedClassLoaderCache();
    method public static void setIsolatedClassLoaderCache(@NonNull java.util.Map<java.lang.String,java.net.URLClassLoader>);
    property @NonNull public static java.util.Set<java.lang.Object> doNotGC;
    property @NonNull public static java.util.Map<java.lang.String,java.net.URLClassLoader> isolatedClassLoaderCache;
  }

  public interface KspAAWorkParameter extends org.gradle.workers.WorkParameters {
    method @NonNull public java.util.List<java.lang.String> getChangedClasses();
    method @NonNull public com.google.devtools.ksp.gradle.KspGradleConfig getConfig();
    method @NonNull public org.gradle.api.file.ConfigurableFileCollection getKspClasspath();
    method @NonNull public java.util.List<java.io.File> getModifiedSources();
    method @NonNull public java.util.List<java.io.File> getRemovedSources();
    method public boolean isInputChangeIncremental();
    method public void setChangedClasses(@NonNull java.util.List<java.lang.String>);
    method public void setConfig(@NonNull com.google.devtools.ksp.gradle.KspGradleConfig);
    method public void setInputChangeIncremental(boolean);
    method public void setKspClasspath(@NonNull org.gradle.api.file.ConfigurableFileCollection);
    method public void setModifiedSources(@NonNull java.util.List<? extends java.io.File>);
    method public void setRemovedSources(@NonNull java.util.List<? extends java.io.File>);
    property @NonNull public abstract java.util.List<java.lang.String> changedClasses;
    property @NonNull public abstract com.google.devtools.ksp.gradle.KspGradleConfig config;
    property public abstract boolean isInputChangeIncremental;
    property @NonNull public abstract org.gradle.api.file.ConfigurableFileCollection kspClasspath;
    property @NonNull public abstract java.util.List<java.io.File> modifiedSources;
    property @NonNull public abstract java.util.List<java.io.File> removedSources;
  }

  public abstract class KspAAWorkerAction implements org.gradle.workers.WorkAction<com.google.devtools.ksp.gradle.KspAAWorkParameter> {
    ctor public KspAAWorkerAction();
    method public void execute();
  }

  public final class KspConfigurations {
    ctor public KspConfigurations(@NonNull org.gradle.api.Project project);
    method @NonNull public java.util.Set<org.gradle.api.artifacts.Configuration> find(@NonNull org.jetbrains.kotlin.gradle.plugin.KotlinCompilation<?> compilation);
    field @NonNull public static final com.google.devtools.ksp.gradle.KspConfigurations.Companion Companion;
  }

  public static final class KspConfigurations.Companion {
  }

  public abstract class KspExtension {
    ctor @javax.inject.Inject public KspExtension(@NonNull org.gradle.api.Project project);
    method public void arg(@NonNull String k, @NonNull String v);
    method public void arg(@NonNull String k, @NonNull org.gradle.api.provider.Provider<java.lang.String> v);
    method public void arg(@NonNull org.gradle.process.CommandLineArgumentProvider arg);
    method public void excludeProcessor(@NonNull String fullyQualifiedName);
    method public boolean getAllWarningsAsErrors();
    method @Deprecated public boolean getAllowSourcesFromOtherPlugins();
    method @NonNull public java.util.Map<java.lang.String,java.lang.String> getArguments();
    method @Deprecated public boolean getBlockOtherCompilerPlugins();
    method @NonNull public abstract org.gradle.api.file.ConfigurableFileCollection getExcludedSources();
    method @NonNull public abstract org.gradle.api.provider.Property<java.lang.Boolean> getUseKsp2();
    method public void setAllWarningsAsErrors(boolean);
    method @Deprecated public void setAllowSourcesFromOtherPlugins(boolean);
    method @Deprecated public void setBlockOtherCompilerPlugins(boolean);
    property public boolean allWarningsAsErrors;
    property @Deprecated public boolean allowSourcesFromOtherPlugins;
    property @NonNull public java.util.Map<java.lang.String,java.lang.String> arguments;
    property @Deprecated public boolean blockOtherCompilerPlugins;
    property @NonNull public abstract org.gradle.api.file.ConfigurableFileCollection excludedSources;
    property @NonNull @com.google.devtools.ksp.KspExperimental public abstract org.gradle.api.provider.Property<java.lang.Boolean> useKsp2;
  }

  public abstract class KspGradleConfig {
    ctor @javax.inject.Inject public KspGradleConfig();
    method @NonNull @org.gradle.api.tasks.Input public abstract org.gradle.api.provider.Property<java.lang.Boolean> getAllWarningsAsErrors();
    method @NonNull @org.gradle.api.tasks.Input public abstract org.gradle.api.provider.MapProperty<java.lang.String,java.lang.String> getApOptions();
    method @NonNull @org.gradle.api.tasks.Input public abstract org.gradle.api.provider.Property<java.lang.String> getApiVersion();
    method @NonNull @org.gradle.api.tasks.LocalState public abstract org.gradle.api.file.DirectoryProperty getCachesDir();
    method @NonNull @org.gradle.api.tasks.OutputDirectory public abstract org.gradle.api.file.DirectoryProperty getClassOutputDir();
    method @NonNull @org.gradle.api.tasks.IgnoreEmptyDirectories @org.gradle.api.tasks.InputFiles @org.gradle.api.tasks.Optional @org.gradle.api.tasks.PathSensitive(org.gradle.api.tasks.PathSensitivity.NONE) @org.gradle.work.Incremental @org.gradle.work.NormalizeLineEndings public abstract org.gradle.api.file.ConfigurableFileCollection getClasspathStructure();
    method @NonNull @org.gradle.api.tasks.IgnoreEmptyDirectories @org.gradle.api.tasks.InputFiles @org.gradle.api.tasks.PathSensitive(org.gradle.api.tasks.PathSensitivity.RELATIVE) @org.gradle.api.tasks.SkipWhenEmpty public abstract org.gradle.api.file.ConfigurableFileCollection getCommonSourceRoots();
    method @NonNull @org.gradle.api.tasks.Input public abstract org.gradle.api.provider.SetProperty<java.lang.String> getExcludedProcessors();
    method @NonNull @org.gradle.api.tasks.Input public abstract org.gradle.api.provider.Property<java.lang.Boolean> getIncremental();
    method @NonNull @org.gradle.api.tasks.Input public abstract org.gradle.api.provider.Property<java.lang.Boolean> getIncrementalLog();
    method @NonNull @org.gradle.api.tasks.OutputDirectory public abstract org.gradle.api.file.DirectoryProperty getJavaOutputDir();
    method @NonNull @org.gradle.api.tasks.IgnoreEmptyDirectories @org.gradle.api.tasks.InputFiles @org.gradle.api.tasks.PathSensitive(org.gradle.api.tasks.PathSensitivity.RELATIVE) @org.gradle.api.tasks.SkipWhenEmpty public abstract org.gradle.api.file.ConfigurableFileCollection getJavaSourceRoots();
    method @NonNull @org.gradle.api.tasks.Internal public abstract org.gradle.api.provider.Property<java.io.File> getJdkHome();
    method @NonNull @org.gradle.api.tasks.Input @org.gradle.api.tasks.Optional public abstract org.gradle.api.provider.Property<java.lang.Integer> getJdkVersion();
    method @NonNull @org.gradle.api.tasks.Input @org.gradle.api.tasks.Optional public abstract org.gradle.api.provider.Property<java.lang.String> getJvmDefaultMode();
    method @NonNull @org.gradle.api.tasks.Input @org.gradle.api.tasks.Optional public abstract org.gradle.api.provider.Property<java.lang.String> getJvmTarget();
    method @NonNull @org.gradle.api.tasks.Input @org.gradle.api.tasks.Optional public abstract org.gradle.api.provider.Property<java.lang.String> getKonanHome();
    method @NonNull @org.gradle.api.tasks.Input @org.gradle.api.tasks.Optional public abstract org.gradle.api.provider.Property<java.lang.String> getKonanTargetName();
    method @NonNull @org.gradle.api.tasks.OutputDirectory public abstract org.gradle.api.file.DirectoryProperty getKotlinOutputDir();
    method @NonNull @org.gradle.api.tasks.Input public abstract org.gradle.api.provider.Property<java.lang.String> getLanguageVersion();
    method @NonNull @org.gradle.api.tasks.Internal public abstract org.gradle.api.file.ConfigurableFileCollection getLibraries();
    method @NonNull @org.gradle.api.tasks.Input public abstract org.gradle.api.provider.Property<org.gradle.api.logging.LogLevel> getLogLevel();
    method @NonNull @org.gradle.api.tasks.Input public abstract org.gradle.api.provider.Property<java.lang.String> getModuleName();
    method @NonNull @org.gradle.api.tasks.IgnoreEmptyDirectories @org.gradle.api.tasks.InputFiles @org.gradle.api.tasks.Optional @org.gradle.api.tasks.PathSensitive(org.gradle.api.tasks.PathSensitivity.RELATIVE) @org.gradle.work.Incremental @org.gradle.work.NormalizeLineEndings public abstract org.gradle.api.file.ConfigurableFileCollection getNonJvmLibraries();
    method @NonNull @org.gradle.api.tasks.Internal public abstract org.gradle.api.file.DirectoryProperty getOutputBaseDir();
    method @NonNull @org.gradle.api.tasks.Input public abstract org.gradle.api.provider.Property<org.jetbrains.kotlin.gradle.plugin.KotlinPlatformType> getPlatformType();
    method @NonNull @org.gradle.api.tasks.Classpath public abstract org.gradle.api.file.ConfigurableFileCollection getProcessorClasspath();
    method @NonNull @org.gradle.api.tasks.Internal public abstract org.gradle.api.provider.MapProperty<java.lang.String,java.lang.String> getProcessorOptions();
    method @NonNull @org.gradle.api.tasks.Internal public abstract org.gradle.api.provider.Property<java.lang.Boolean> getProfilingMode();
    method @NonNull @org.gradle.api.tasks.Internal public abstract org.gradle.api.provider.Property<java.io.File> getProjectBaseDir();
    method @NonNull @org.gradle.api.tasks.OutputDirectory public abstract org.gradle.api.file.DirectoryProperty getResourceOutputDir();
    method @NonNull @org.gradle.api.tasks.IgnoreEmptyDirectories @org.gradle.api.tasks.InputFiles @org.gradle.api.tasks.PathSensitive(org.gradle.api.tasks.PathSensitivity.RELATIVE) @org.gradle.api.tasks.SkipWhenEmpty public abstract org.gradle.api.file.ConfigurableFileCollection getSourceRoots();
    property @NonNull @org.gradle.api.tasks.Input public abstract org.gradle.api.provider.Property<java.lang.Boolean> allWarningsAsErrors;
    property @NonNull @org.gradle.api.tasks.Input public abstract org.gradle.api.provider.MapProperty<java.lang.String,java.lang.String> apOptions;
    property @NonNull @org.gradle.api.tasks.Input public abstract org.gradle.api.provider.Property<java.lang.String> apiVersion;
    property @NonNull @org.gradle.api.tasks.LocalState public abstract org.gradle.api.file.DirectoryProperty cachesDir;
    property @NonNull @org.gradle.api.tasks.OutputDirectory public abstract org.gradle.api.file.DirectoryProperty classOutputDir;
    property @NonNull @org.gradle.api.tasks.IgnoreEmptyDirectories @org.gradle.api.tasks.InputFiles @org.gradle.api.tasks.Optional @org.gradle.api.tasks.PathSensitive(org.gradle.api.tasks.PathSensitivity.NONE) @org.gradle.work.Incremental @org.gradle.work.NormalizeLineEndings public abstract org.gradle.api.file.ConfigurableFileCollection classpathStructure;
    property @NonNull @org.gradle.api.tasks.IgnoreEmptyDirectories @org.gradle.api.tasks.InputFiles @org.gradle.api.tasks.PathSensitive(org.gradle.api.tasks.PathSensitivity.RELATIVE) @org.gradle.api.tasks.SkipWhenEmpty public abstract org.gradle.api.file.ConfigurableFileCollection commonSourceRoots;
    property @NonNull @org.gradle.api.tasks.Input public abstract org.gradle.api.provider.SetProperty<java.lang.String> excludedProcessors;
    property @NonNull @org.gradle.api.tasks.Input public abstract org.gradle.api.provider.Property<java.lang.Boolean> incremental;
    property @NonNull @org.gradle.api.tasks.Input public abstract org.gradle.api.provider.Property<java.lang.Boolean> incrementalLog;
    property @NonNull @org.gradle.api.tasks.OutputDirectory public abstract org.gradle.api.file.DirectoryProperty javaOutputDir;
    property @NonNull @org.gradle.api.tasks.IgnoreEmptyDirectories @org.gradle.api.tasks.InputFiles @org.gradle.api.tasks.PathSensitive(org.gradle.api.tasks.PathSensitivity.RELATIVE) @org.gradle.api.tasks.SkipWhenEmpty public abstract org.gradle.api.file.ConfigurableFileCollection javaSourceRoots;
    property @NonNull @org.gradle.api.tasks.Internal public abstract org.gradle.api.provider.Property<java.io.File> jdkHome;
    property @NonNull @org.gradle.api.tasks.Input @org.gradle.api.tasks.Optional public abstract org.gradle.api.provider.Property<java.lang.Integer> jdkVersion;
    property @NonNull @org.gradle.api.tasks.Input @org.gradle.api.tasks.Optional public abstract org.gradle.api.provider.Property<java.lang.String> jvmDefaultMode;
    property @NonNull @org.gradle.api.tasks.Input @org.gradle.api.tasks.Optional public abstract org.gradle.api.provider.Property<java.lang.String> jvmTarget;
    property @NonNull @org.gradle.api.tasks.Input @org.gradle.api.tasks.Optional public abstract org.gradle.api.provider.Property<java.lang.String> konanHome;
    property @NonNull @org.gradle.api.tasks.Input @org.gradle.api.tasks.Optional public abstract org.gradle.api.provider.Property<java.lang.String> konanTargetName;
    property @NonNull @org.gradle.api.tasks.OutputDirectory public abstract org.gradle.api.file.DirectoryProperty kotlinOutputDir;
    property @NonNull @org.gradle.api.tasks.Input public abstract org.gradle.api.provider.Property<java.lang.String> languageVersion;
    property @NonNull @org.gradle.api.tasks.Internal public abstract org.gradle.api.file.ConfigurableFileCollection libraries;
    property @NonNull @org.gradle.api.tasks.Input public abstract org.gradle.api.provider.Property<org.gradle.api.logging.LogLevel> logLevel;
    property @NonNull @org.gradle.api.tasks.Input public abstract org.gradle.api.provider.Property<java.lang.String> moduleName;
    property @NonNull @org.gradle.api.tasks.IgnoreEmptyDirectories @org.gradle.api.tasks.InputFiles @org.gradle.api.tasks.Optional @org.gradle.api.tasks.PathSensitive(org.gradle.api.tasks.PathSensitivity.RELATIVE) @org.gradle.work.Incremental @org.gradle.work.NormalizeLineEndings public abstract org.gradle.api.file.ConfigurableFileCollection nonJvmLibraries;
    property @NonNull @org.gradle.api.tasks.Internal public abstract org.gradle.api.file.DirectoryProperty outputBaseDir;
    property @NonNull @org.gradle.api.tasks.Input public abstract org.gradle.api.provider.Property<org.jetbrains.kotlin.gradle.plugin.KotlinPlatformType> platformType;
    property @NonNull @org.gradle.api.tasks.Classpath public abstract org.gradle.api.file.ConfigurableFileCollection processorClasspath;
    property @NonNull @org.gradle.api.tasks.Internal public abstract org.gradle.api.provider.MapProperty<java.lang.String,java.lang.String> processorOptions;
    property @NonNull @org.gradle.api.tasks.Internal public abstract org.gradle.api.provider.Property<java.lang.Boolean> profilingMode;
    property @NonNull @org.gradle.api.tasks.Internal public abstract org.gradle.api.provider.Property<java.io.File> projectBaseDir;
    property @NonNull @org.gradle.api.tasks.OutputDirectory public abstract org.gradle.api.file.DirectoryProperty resourceOutputDir;
    property @NonNull @org.gradle.api.tasks.IgnoreEmptyDirectories @org.gradle.api.tasks.InputFiles @org.gradle.api.tasks.PathSensitive(org.gradle.api.tasks.PathSensitivity.RELATIVE) @org.gradle.api.tasks.SkipWhenEmpty public abstract org.gradle.api.file.ConfigurableFileCollection sourceRoots;
  }

  public final class KspGradleSubplugin implements org.jetbrains.kotlin.gradle.plugin.KotlinCompilerPluginSupportPlugin {
    method public void apply(@NonNull org.gradle.api.Project target);
    method @NonNull public org.gradle.api.provider.Provider<java.util.List<org.jetbrains.kotlin.gradle.plugin.SubpluginOption>> applyToCompilation(@NonNull org.jetbrains.kotlin.gradle.plugin.KotlinCompilation<?> kotlinCompilation);
    method @NonNull public String getCompilerPluginId();
    method @NonNull public static org.gradle.api.provider.Provider<org.gradle.api.file.Directory> getKspCachesDir(@NonNull org.gradle.api.Project project, @NonNull String sourceSetName, @NonNull String target);
    method @NonNull public static org.gradle.api.provider.Provider<org.gradle.api.file.Directory> getKspClassOutputDir(@NonNull org.gradle.api.Project project, @NonNull String sourceSetName, @NonNull String target);
    method @NonNull public static org.gradle.api.provider.Provider<org.gradle.api.file.Directory> getKspJavaOutputDir(@NonNull org.gradle.api.Project project, @NonNull String sourceSetName, @NonNull String target);
    method @NonNull public static org.gradle.api.provider.Provider<org.gradle.api.file.Directory> getKspKotlinOutputDir(@NonNull org.gradle.api.Project project, @NonNull String sourceSetName, @NonNull String target);
    method @NonNull public static org.gradle.api.provider.Provider<org.gradle.api.file.Directory> getKspOutputDir(@NonNull org.gradle.api.Project project, @NonNull String sourceSetName, @NonNull String target);
    method @NonNull public static org.gradle.api.provider.Provider<org.gradle.api.file.Directory> getKspResourceOutputDir(@NonNull org.gradle.api.Project project, @NonNull String sourceSetName, @NonNull String target);
    method @NonNull public org.jetbrains.kotlin.gradle.plugin.SubpluginArtifact getPluginArtifact();
    method public boolean isApplicable(@NonNull org.jetbrains.kotlin.gradle.plugin.KotlinCompilation<?> kotlinCompilation);
    field @NonNull public static final com.google.devtools.ksp.gradle.KspGradleSubplugin.Companion Companion;
    field @NonNull public static final String KSP_API_ID = "symbol-processing-api";
    field @NonNull public static final String KSP_COMPILER_PLUGIN_ID = "symbol-processing";
    field @NonNull public static final String KSP_GROUP_ID = "com.google.devtools.ksp";
    field @NonNull public static final String KSP_PLUGIN_CLASSPATH_CONFIGURATION_NAME = "kspPluginClasspath";
    field @NonNull public static final String KSP_PLUGIN_CLASSPATH_CONFIGURATION_NAME_NON_EMBEDDABLE = "kspPluginClasspathNonEmbeddable";
    field @NonNull public static final String KSP_PLUGIN_ID = "com.google.devtools.ksp.symbol-processing";
  }

  public static final class KspGradleSubplugin.Companion {
    method @NonNull public org.gradle.api.provider.Provider<org.gradle.api.file.Directory> getKspCachesDir(@NonNull org.gradle.api.Project project, @NonNull String sourceSetName, @NonNull String target);
    method @NonNull public org.gradle.api.provider.Provider<org.gradle.api.file.Directory> getKspClassOutputDir(@NonNull org.gradle.api.Project project, @NonNull String sourceSetName, @NonNull String target);
    method @NonNull public org.gradle.api.provider.Provider<org.gradle.api.file.Directory> getKspJavaOutputDir(@NonNull org.gradle.api.Project project, @NonNull String sourceSetName, @NonNull String target);
    method @NonNull public org.gradle.api.provider.Provider<org.gradle.api.file.Directory> getKspKotlinOutputDir(@NonNull org.gradle.api.Project project, @NonNull String sourceSetName, @NonNull String target);
    method @NonNull public org.gradle.api.provider.Provider<org.gradle.api.file.Directory> getKspOutputDir(@NonNull org.gradle.api.Project project, @NonNull String sourceSetName, @NonNull String target);
    method @NonNull public org.gradle.api.provider.Provider<org.gradle.api.file.Directory> getKspResourceOutputDir(@NonNull org.gradle.api.Project project, @NonNull String sourceSetName, @NonNull String target);
    property public static String KSP_API_ID;
    property public static String KSP_COMPILER_PLUGIN_ID;
    property public static String KSP_GROUP_ID;
    property public static String KSP_PLUGIN_CLASSPATH_CONFIGURATION_NAME;
    property public static String KSP_PLUGIN_CLASSPATH_CONFIGURATION_NAME_NON_EMBEDDABLE;
    property public static String KSP_PLUGIN_ID;
  }

  public final class ProcessorClasspathConfigurationsTest {
    ctor public ProcessorClasspathConfigurationsTest();
    method public void testArgumentsAreNotResolvedAtConfigurationTime();
    method public void testConfigurationsAreNotResolvedAtConfigurationTime();
    method public void testConfigurationsForAndroidApp();
    method public void testConfigurationsForMultiPlatformApp();
    method public void testConfigurationsForSinglePlatformApp();
    method public void testConfigurationsForSinglePlatformAppDisallowAll();
    property public com.google.devtools.ksp.gradle.testing.KspIntegrationTestRule testRule;
    property public ErrorType tmpDir;
    field @NonNull public final com.google.devtools.ksp.gradle.testing.KspIntegrationTestRule testRule;
    field @NonNull public final error.NonExistentClass tmpDir;
  }

  public final class SourceSetConfigurationsTest {
    ctor public SourceSetConfigurationsTest();
    method public void configurationsForAndroidApp();
    method public void configurationsForAndroidApp_withBuildFlavorsMatchesKapt();
    method public void configurationsForJvmApp();
    method public void configurationsForMultiplatformApp();
    method public void configurationsForMultiplatformApp_skipEmptyKspTasks();
    method public void kspForTests_android_androidTest();
    method public void kspForTests_android_junit();
    method public void kspForTests_jvm();
    method public void registerGeneratedSourcesToAndroid_BuiltInKotlinEnabled();
    property public com.google.devtools.ksp.gradle.testing.KspIntegrationTestRule testRule;
    property public ErrorType tmpDir;
    field @NonNull public final com.google.devtools.ksp.gradle.testing.KspIntegrationTestRule testRule;
    field @NonNull public final error.NonExistentClass tmpDir;
  }

}

package com.google.devtools.ksp.gradle.model {

  public interface Ksp {
    method public long getModelVersion();
    method @NonNull public String getName();
    property public abstract long modelVersion;
    property @NonNull public abstract String name;
  }

}

package com.google.devtools.ksp.gradle.model.builder {

  public final class KspModelBuilder implements org.gradle.tooling.provider.model.ToolingModelBuilder {
    ctor public KspModelBuilder();
    method @NonNull public Object buildAll(@NonNull String modelName, @NonNull org.gradle.api.Project project);
    method public boolean canBuild(@NonNull String modelName);
  }

  public final class KspModelBuilderTest {
    ctor public KspModelBuilderTest();
    method public void testCanBuild();
  }

}

package com.google.devtools.ksp.gradle.model.impl {

  public final class KspImpl implements com.google.devtools.ksp.gradle.model.Ksp java.io.Serializable {
    ctor public KspImpl(@NonNull String name);
    method @NonNull public String component1();
    method @NonNull public com.google.devtools.ksp.gradle.model.impl.KspImpl copy(@NonNull String name);
    method public long getModelVersion();
    method @NonNull public String getName();
    property public long modelVersion;
    property @NonNull public String name;
    field @NonNull public static final com.google.devtools.ksp.gradle.model.impl.KspImpl.Companion Companion;
  }

  public static final class KspImpl.Companion {
  }

}

package com.google.devtools.ksp.gradle.processor {

  public abstract class TestSymbolProcessorProvider implements com.google.devtools.ksp.processing.SymbolProcessorProvider {
    ctor public TestSymbolProcessorProvider(@NonNull kotlin.jvm.functions.Function1<? super com.google.devtools.ksp.processing.SymbolProcessorEnvironment,? extends com.google.devtools.ksp.processing.SymbolProcessor> builder);
    method @NonNull public com.google.devtools.ksp.processing.SymbolProcessor create(@NonNull com.google.devtools.ksp.processing.SymbolProcessorEnvironment environment);
  }

}

package com.google.devtools.ksp.gradle.testing {

  public final class DependencyDeclaration {
    method @NonNull public String component1();
    method @NonNull public String component2();
    method @NonNull public com.google.devtools.ksp.gradle.testing.DependencyDeclaration copy(@NonNull String configuration, @NonNull String dependency);
    method @NonNull public String getConfiguration();
    method @NonNull public String getDependency();
    method @NonNull public String toCode();
    property @NonNull public String configuration;
    property @NonNull public String dependency;
    field @NonNull public static final com.google.devtools.ksp.gradle.testing.DependencyDeclaration.Companion Companion;
  }

  public static final class DependencyDeclaration.Companion {
    method @NonNull public com.google.devtools.ksp.gradle.testing.DependencyDeclaration artifact(@NonNull String configuration, @NonNull String coordinates);
    method @NonNull public com.google.devtools.ksp.gradle.testing.DependencyDeclaration files(@NonNull String configuration, @NonNull String path);
    method @NonNull public com.google.devtools.ksp.gradle.testing.DependencyDeclaration module(@NonNull String configuration, @NonNull com.google.devtools.ksp.gradle.testing.TestModule module);
  }

  public final class KspIntegrationTestRule {
    ctor public KspIntegrationTestRule(@NonNull error.NonExistentClass tmpFolder);
    method public void addProvider(@NonNull kotlin.reflect.KClass<? extends com.google.devtools.ksp.processing.SymbolProcessorProvider> provider);
    method @NonNull public com.google.devtools.ksp.gradle.testing.TestModule getAppModule();
    method @NonNull public com.google.devtools.ksp.gradle.testing.TestModule getProcessorModule();
    method @NonNull public com.google.devtools.ksp.gradle.testing.TestConfig getTestConfig();
    method public error.NonExistentClass runner();
    method public void setupAppAsAndroidApp(boolean enableAgpBuiltInKotlinSupport, boolean applyKspPluginFirst);
    method public void setupAppAsJvmApp();
    method public void setupAppAsMultiplatformApp(@NonNull String targets);
    method public void starting(@NonNull error.NonExistentClass description);
    property @NonNull public com.google.devtools.ksp.gradle.testing.TestModule appModule;
    property @NonNull public com.google.devtools.ksp.gradle.testing.TestModule processorModule;
    property @NonNull public com.google.devtools.ksp.gradle.testing.TestConfig testConfig;
  }

  public final class PluginDeclaration {
    method @NonNull public String component1();
    method @NonNull public String component2();
    method @NonNull public com.google.devtools.ksp.gradle.testing.PluginDeclaration copy(@NonNull String text, @NonNull String version);
    method @NonNull public String getText();
    method @NonNull public String getVersion();
    method @NonNull public String toCode();
    property @NonNull public String text;
    property @NonNull public String version;
    field @NonNull public static final com.google.devtools.ksp.gradle.testing.PluginDeclaration.Companion Companion;
  }

  public static final class PluginDeclaration.Companion {
    method @NonNull public com.google.devtools.ksp.gradle.testing.PluginDeclaration id(@NonNull String id, @NonNull String version);
    method @NonNull public com.google.devtools.ksp.gradle.testing.PluginDeclaration kotlin(@NonNull String id, @NonNull String version);
  }

  public final class TestConfig {
    ctor public TestConfig(@NonNull java.io.File kspProjectDir, @NonNull String processorClasspath, @NonNull java.io.File mavenRepoDir, @NonNull String kspVersion);
    method @NonNull public java.io.File component1();
    method @NonNull public String component2();
    method @NonNull public java.io.File component3();
    method @NonNull public String component4();
    method @NonNull public com.google.devtools.ksp.gradle.testing.TestConfig copy(@NonNull java.io.File kspProjectDir, @NonNull String processorClasspath, @NonNull java.io.File mavenRepoDir, @NonNull String kspVersion);
    method @NonNull public String getAndroidBaseVersion();
    method @NonNull public String getKotlinBaseVersion();
    method @NonNull public java.io.File getKspProjectDir();
    method @NonNull public String getKspVersion();
    method @NonNull public java.io.File getMavenRepoDir();
    method @NonNull public String getMavenRepoPath();
    method @NonNull public String getProcessorClasspath();
    property @NonNull public String androidBaseVersion;
    property @NonNull public String kotlinBaseVersion;
    property @NonNull public java.io.File kspProjectDir;
    property @NonNull public String kspVersion;
    property @NonNull public java.io.File mavenRepoDir;
    property @NonNull public String mavenRepoPath;
    property @NonNull public String processorClasspath;
    field @NonNull public static final com.google.devtools.ksp.gradle.testing.TestConfig.Companion Companion;
  }

  public static final class TestConfig.Companion {
    method @NonNull public com.google.devtools.ksp.gradle.testing.TestConfig read();
  }

  public final class TestModule {
    ctor public TestModule(@NonNull java.io.File moduleRoot, @NonNull java.util.List<com.google.devtools.ksp.gradle.testing.PluginDeclaration> plugins, @NonNull java.util.List<com.google.devtools.ksp.gradle.testing.DependencyDeclaration> dependencies);
    method public void addAndroidTestSource(@NonNull String name, @NonNull String contents);
    method public void addMultiplatformSource(@NonNull String sourceSet, @NonNull String name, @NonNull String contents);
    method public void addSource(@NonNull String name, @NonNull String contents);
    method public void addTestSource(@NonNull String name, @NonNull String contents);
    method @NonNull public java.util.LinkedHashSet<java.lang.String> getBuildFileAdditions();
    method @NonNull public java.util.LinkedHashSet<com.google.devtools.ksp.gradle.testing.DependencyDeclaration> getDependencies();
    method @NonNull public java.io.File getKspServicesFile();
    method @NonNull public java.io.File getModuleRoot();
    method public String getName();
    method @NonNull public java.util.LinkedHashSet<com.google.devtools.ksp.gradle.testing.PluginDeclaration> getPlugins();
    method public void writeBuildFile();
    property @NonNull public java.util.LinkedHashSet<java.lang.String> buildFileAdditions;
    property @NonNull public java.util.LinkedHashSet<com.google.devtools.ksp.gradle.testing.DependencyDeclaration> dependencies;
    property @NonNull public java.io.File kspServicesFile;
    property @NonNull public java.io.File moduleRoot;
    property public String name;
    property @NonNull public java.util.LinkedHashSet<com.google.devtools.ksp.gradle.testing.PluginDeclaration> plugins;
  }

  public final class TestProject {
    ctor public TestProject(@NonNull java.io.File rootDir, @NonNull com.google.devtools.ksp.gradle.testing.TestConfig testConfig);
    method @NonNull public com.google.devtools.ksp.gradle.testing.TestModule getAppModule();
    method @NonNull public com.google.devtools.ksp.gradle.testing.TestModule getProcessorModule();
    method @NonNull public java.io.File getRootDir();
    method @NonNull public com.google.devtools.ksp.gradle.testing.TestConfig getTestConfig();
    method public void writeAndroidGradlePropertiesFile();
    method public void writeFiles();
    property @NonNull public com.google.devtools.ksp.gradle.testing.TestModule appModule;
    property @NonNull public com.google.devtools.ksp.gradle.testing.TestModule processorModule;
    property @NonNull public java.io.File rootDir;
    property @NonNull public com.google.devtools.ksp.gradle.testing.TestConfig testConfig;
  }

}

package com.google.devtools.ksp.gradle.utils {

  public final class AgpUtilsKt {
    method @Nullable public static com.android.build.api.AndroidPluginVersion getAgpVersion(@NonNull org.gradle.api.Project);
  }

}

